/**
 * @author		Peter Slagter
 * @author		Ryan Fioravanti
 * @source		http://code.google.com/mobile/articles/fast_buttons.html
 */

window.PbLib = window.PbLib || {};
PbLib.UI = PbLib.UI || {};
PbLib.UI.clickbuster = PbLib.UI.clickbuster || {};

/** Construct the FastButton with a reference to the element and click handler. */
PbLib.UI.FastTap = function(element, handler) {
	this.element = element;
	this.handler = handler;

	element.addEventListener('touchstart', this, false);
	element.addEventListener('click', this, false);
};

PbLib.UI.FastTap.prototype.handleEvent = function(event) {
	switch (event.type) {
		case 'touchstart':
			this.onTouchStart(event);
			break;
		case 'touchmove':
			this.onTouchMove(event);
			break;
		case 'touchend':
			this.onClick(event);
			break;
		case 'click':
			this.onClick(event);
			break;
	}
};

/**
 * Save a reference to the touchstart coordinate and start listening to touchmove and touchend events.
 * Calling stopPropagation guarantees that other behaviors don't get a chance to handle the same click event.
 */

PbLib.UI.FastTap.prototype.onTouchStart = function(event) {
	event.stopPropagation();

	this.element.addEventListener('touchend', this, false);
	document.body.addEventListener('touchmove', this, false);

	this.startX = event.touches[0].clientX;
	this.startY = event.touches[0].clientY;
};

/** When a touchmove event is invoked, check if the user has dragged past the threshold of 10px. */
PbLib.UI.FastTap.prototype.onTouchMove = function(event) {
	if (Math.abs(event.touches[0].clientX - this.startX) > 10 ||
			Math.abs(event.touches[0].clientY - this.startY) > 10) {
		this.reset();
	}
};

/** Invoke the actual click handler and prevent ghost clicks if this was a touchend event. */
PbLib.UI.FastTap.prototype.onClick = function(event) {
	event.stopPropagation();
	this.reset();
	this.handler(event);

	if (event.type == 'touchend') {
		PbLib.UI.clickbuster.preventGhostClick(this.startX, this.startY);
	}
};

PbLib.UI.FastTap.prototype.reset = function() {
	this.element.removeEventListener('touchend', this, false);
	document.body.removeEventListener('touchmove', this, false);
};

PbLib.UI.FastTap.prototype.removeHandler = function() {
	this.element.removeEventListener('touchstart', this, false);
	this.element.removeEventListener('click', this, false);
};

/** Call preventGhostClick to bust all click events that happen within 25px of the provided x, y coordinates in the next 2.5s. */
PbLib.UI.clickbuster.preventGhostClick = function(x, y) {
	PbLib.UI.clickbuster.coordinates.push(x, y);
	window.setTimeout(PbLib.UI.clickbuster.pop, 2500);
};

PbLib.UI.clickbuster.pop = function () {
	PbLib.UI.clickbuster.coordinates.splice(0, 2);
};

/**
 * If we catch a click event inside the given radius and time threshold then we call stopPropagation and preventDefault.
 * Calling preventDefault will stop links from being activated.
 */

PbLib.UI.clickbuster.onClick = function(event) {
	for (var i = 0; i < PbLib.UI.clickbuster.coordinates.length; i += 2) {
		var x = PbLib.UI.clickbuster.coordinates[i];
		var y = PbLib.UI.clickbuster.coordinates[i + 1];
		if (Math.abs(event.clientX - x) < 25 && Math.abs(event.clientY - y) < 25) {
			event.stopPropagation();
			event.preventDefault();
		}
	}
};

if (document.addEventListener) {
	document.addEventListener('click', PbLib.UI.clickbuster.onClick, true);
}

PbLib.UI.clickbuster.coordinates = [];